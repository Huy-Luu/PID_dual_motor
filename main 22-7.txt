/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "math.h"
#include <string.h>
#include "stdio.h"
#include "stdlib.h"
#include "GPSCar.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define PIDmax 10000
#define compass 0x1A

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

	uint16_t int_count;	//bien dem int


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//testing variables
uint16_t pre_tim4,tim4;

//re_arrange
	float actual_speed, actual_speed_right, PWM=0, PWM_right, AddInPWM;
	uint8_t counter;
	uint16_t PWM_out;
	uint8_t MSG[50], route[1000];
	uint8_t write_data;
	uint8_t compassData[6];
	int16_t x_axis,y_axis,z_axis;
	float distance; uint64_t addUp;
	float firstHeading=0.0, heading, toRotate;
	uint8_t dir;
	
	uint8_t enable; //for mode 1


//UART handling
	uint8_t mode=48;
	
//extracting strings
	char *token;
	float angle[10]={0};
	float dist[10]={0};
	uint8_t column;



	float error, error_pre=0,error_pre_pre=0, error_speed, pre_out;


	float kp=10, ki=7000, kd=25 ;
	float kp_angle=10, ki_angle=750, kd_angle=50;

	float derivative=0, integratal=0, integratal_pre=0;

	float output=0;

//time related
	uint16_t repeated_time,count,pre_count;
	
	//float pre_count, count;
	
	uint16_t pre_count_right, count_right;
	
	float  period, pre_period, sample_time;
	
	float stable_time;
	
	//flags
	
	//bo thong so cho PID left
	float error_angle=0, error_pre_angle=0, error_pre_pre_angle=0, error_angle, bias;

	float derivative_angle=0, integratal_angle=0, integratal_pre_angle=0;

	float output_angle=0, output_pre_angle=0;
	
	//coupling PID:
	float pre_error_diff, error_diff, output_coup;
	float kp_coup=15,ki_coup=0.002;
	
	
	
//	float calculate(float repeated_time, float desired_speed, float actual_speed, float coup)
//{

//error_speed = desired_speed-actual_speed;
//	
//error=error_speed;//*334)/(3.14*(1000/sample_time)*0.1) + coup;					//turned into pulses read in 0.2s

//integratal = integratal_pre + (error)*repeated_time;
//	
//derivative = (error-error_pre)/repeated_time;

//output = kp*(error-error_pre) + ki*integratal + kd*derivative;
//	
//integratal_pre = integratal;
//error_pre=error;
//	
//return output;
//}

	float calculate(float repeated_time, float desired_speed, float actual_speed, float coup)
{

error_speed = desired_speed-actual_speed;
	
error=error_speed;//*334)/(3.14*(1000/sample_time)*0.1) + coup;					//turned into pulses read in 0.2s

integratal = (error_pre + error)*repeated_time;
	
derivative = error - 2*error_pre + error_pre_pre;

output = pre_out + kp*(error-error_pre) + 0.5*ki*integratal + (kd/repeated_time)*derivative;
	
integratal_pre = integratal;
error_pre=error;
	error_pre_pre=error_pre;
pre_out=output;
	
return output;
}

// for right channel (TIM2)
	float calculate_angle(float repeated_time, float desired_angle, float actual_angle)
{

error_angle = desired_angle-actual_angle;
	
integratal_angle = (error_pre_angle + error_angle)*repeated_time;
	
derivative_angle = error_angle - 2*error_pre_angle + error_pre_pre_angle;

output_angle = output_pre_angle + kp_angle*(error_angle - error_pre_angle) + 0.5*ki_angle*integratal_angle + (kd_angle/repeated_time)*derivative_angle;
	
	if(output_angle>(900))
	{
		output_angle=900;
	}
	
	else if(output_angle<(-800))
	{
		output_angle=(-800);
	}
	
integratal_pre_angle = integratal_angle;
error_pre_angle = error_angle;
error_pre_pre_angle = error_pre_angle;
output_pre_angle = output_angle;
	
	
return output_angle;
}

//coupling algorithm
void coupling_control(float actual_speed_right, float actual_speed, float repeated_time)
{
	error_diff = actual_speed - actual_speed_right;
	
	error_diff= (error_diff*334)/(3.14*5*0.1);
	
	//output
	output_coup += (kp_coup * (error_diff-pre_error_diff)) + (ki_coup * repeated_time);
	
	pre_error_diff = error_diff;
	
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	
	//HAL_UART_Transmit(&huart1, &mode, 1, 200);
	
		if(mode=='1')
		{
			enable=1;
		}
		
		else if(mode=='0')
		{
			HAL_UART_Receive_IT(&huart1, &mode, 1);
		}
}

void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}







/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
	
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
	HAL_I2C_Init(&hi2c1);
	
	//HAL_UART_Receive_IT(&huart1, &mode, 1);
	
	compassInit();
	


	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,0);// trái
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,0);//phai
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
	htim1.Instance->CCR1=0;
	htim1.Instance->CCR2=0;
	
	//debug
	readAxis(compassData);
	firstHeading=convert(&x_axis, &y_axis, &z_axis, compassData);
	sprintf(MSG,"\r\nTo Compare: %f",firstHeading);
	HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
	
	HAL_Delay(2000);
	readAxis(compassData);
	firstHeading=convert(&x_axis, &y_axis, &z_axis, compassData);
	sprintf(MSG,"\r\nTo Compare: %f",firstHeading);
	HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
	HAL_Delay(1000);
	
  while (1)
  {


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		
		
		switch(mode)
		{
			case 48:
				
			//test manual
			/*
			HAL_UART_Receive(&huart1, &dir, 1, 50);
			switch(dir)
			{
			case 'w':
				forward();

			break;
			
			case 's':
				backward();
			break;
			
			case 'a':
				left();
			break;
			
			case 'd':
				right();
			break;
			
			case 'f':
				stop();
			break;
			}
					HAL_UART_Transmit(&huart1, &dir,1,200);
*/

			//----------------- PID tính toan lay mau trong 10ms -------------------------------------		
		PID();
		
		
		//-------------------- PID so sanh voi la ban ----------------------------------------------
		readAxis(compassData);
		heading=convert(&x_axis, &y_axis, &z_axis,  compassData);
		AddInPWM=PIDAngle(firstHeading, heading);

//		sprintf(MSG,"\r\nAngle: %f\r\nDistance: %d\r\n",convert(&x_axis,&y_axis,&z_axis,compassData), distance);
//		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
		
		sprintf(MSG,"\r\n%f %f %f",PWM, AddInPWM, PWM+AddInPWM );
		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
		

		
		htim1.Instance->CCR2=PWM;
		htim1.Instance->CCR1=PWM+AddInPWM; 

		
		
		
		
		//tinh toan quang duong
		if(TIM2->CNT<60000)
		{
		distance+=TIM2->CNT;
		}
			
		TIM2->CNT=0;
		TIM3->CNT=0;
		
		break;
		
		
		break; // break case 48 nen co the bi trungggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
		
		
		// mode 1
		case 49:
		
					htim1.Instance->CCR1=0;
					htim1.Instance->CCR2=0;		
		
		while(enable)
		{
		memset(MSG,0,sizeof(MSG));
		enable=0;
		}
		
		//Pending for message
		sprintf(MSG,"Pending for message");
		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
		while(route[0]==0)
		{
			HAL_UART_Receive(&huart1, route, sizeof(route), 1000);
		}

//		while(1)
//		{
//		HAL_UART_Transmit(&huart1, route, sizeof(route),3000);
//		HAL_Delay(2000);
//		}
		
		HAL_UART_Transmit(&huart1, route, sizeof(route),3000);

		
		//extracting data
		
			
			column=0;
			token=strtok(route,",");
			int i=0;

			
			while(token)
			{
				if((column%2)==0)
				{
					angle[i]=atof(token);
				}
				
				if((column%2)!=0)
				{
					i--;
					dist[i]=atof(token);
				}
				token=strtok(NULL,",");
				column++;
				i++;
			}
		
		
		for(int i=0; i<10; ++i)
		{
			if(angle[i]!=0.0)
			{
				sprintf(MSG,"\r\n%dth: %f and %f",i,angle[i], dist[i]);
				HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
			}
		}
		
		memset(MSG,0,sizeof(MSG));
		HAL_Delay(5000);
		//control part
		
		
		
		
		
		
		
		
		
		
		// check for correction
		for(int i=0; i<column/2; ++i)
		{
			readAxis(compassData);
			heading=convert(&x_axis,&y_axis,&z_axis,compassData);
		
			
			if(angle[i]!=0.0)
			{
					sprintf(MSG,"\r\To compare: %f",angle[i]);
					HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,0);// trái
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,1);//phai
	
					htim1.Instance->CCR1=6000;
					htim1.Instance->CCR2=6000;
				if(angle[i]>0.0)
				{
					while((heading<(0.9*angle[i]))||(heading>(1.1*angle[i])))
					{
						readAxis(compassData);
						heading=convert(&x_axis,&y_axis,&z_axis,compassData);
//						sprintf(MSG,"\r\nheading: %f",heading);
//						HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
					}
				}
				
				if(angle[i]<0.0)
				{
					while((heading>(0.9*angle[i]))||(heading<(1.1*angle[i])))
					{
						readAxis(compassData);
						heading=convert(&x_axis,&y_axis,&z_axis,compassData);
//						sprintf(MSG,"\r\nheading: %f",heading);
//						HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
					}
				}
				
				sprintf(MSG,"\r\n%dth: ok, heading: %f",i, heading);
				HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
					htim1.Instance->CCR1=0;
					htim1.Instance->CCR2=0;
				
				//distance control
				TIM2->CNT=0;
				
				memset(MSG,0,sizeof(MSG));
				sprintf(MSG,"\r\nDistance control              ");
				HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
				
				htim1.Instance->CCR1=0;
				htim1.Instance->CCR2=6000;
				memset(MSG,0,sizeof(MSG));
				distance=0;
					while(distance<(0.9*1000*dist[i]))
					{
						if(TIM2->CNT<60000)
						{
							distance=(((float)(addUp)/334)*3.14*0.07);
							sprintf(MSG,"\r\nTraveled: %f",distance);
							HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
							HAL_Delay(200);
							addUp+=TIM2->CNT;
							TIM2->CNT=0;
						}
					}
					htim1.Instance->CCR1=0;
				sprintf(MSG,"\r\nReached Destination              ");
				HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),200);
					htim1.Instance->CCR2=0;
					addUp=0;
				
				
			HAL_Delay(2000);
			}
		}
	
		
		while(1)
		{
		}
		HAL_Delay(200);
		break;
		
	}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
